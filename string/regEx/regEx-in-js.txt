Strings support four methods that use regular expressions.

    1. search()
    2. replace()
    3. match()

----------------------------
1. search(arg)

    > "JavaScript".search(/script/i);
    > 4


    @Arguments

        arg:
             A regular-expression.
             If arg is not a regular express, it is first convert
             to one by passing it to the RegExp constructor.

    @Return

         returns the character position of the start of the first matching substring
         or âˆ’1 if there is no match

    does not support global searhes; it ignores the g flag.



----------------------------
2. replace(regEx, replcement-string )

    > test.replace(/javascript/gi, "JavaSCript");

    Performs a search-and-replace operation.

    Takes a regular expression as its first argument and
    a replacement string as its second argument.

    If the reglluar expression has the 'g' flag set,
    all matches in the string is replaced with the replacement string;
    otherwise, only the first match is replaced.

    If first arguments is a string rather then a regEx,
    the method searches for that string literally. Unlike search() it will
    not convert to regEx with RegExp() constructor.


----------------------------
3. match()

    The match() method is the most general of the String regular
    expression methods.

    It takes a regular expression as its only argument (or converts
    its argument to a regular expression by passing it to the
    RegExp() constructor)

    returns an array that contains the results of the match.

    If the regular expression has the g flag set, the method returns
    an array of all matches that appear in the string. For example:

    "1 plus 2 equals 3".match(/\d+/g) // returns ["1", "2", "3"]

------------------------------

The RegExp Object
=================

The RegExp() constructor takes one or two string arguments and creates a new RegExp
object.

The first argument:

    A string that contains the body of the regular expression.
    i.e., the text that would appear within slashes in a regular
    expression literal.

    [!] Note that both string literals and regular expressions use
    the \ character for escape sequences, so when you pass a regular
    expression to RegExp() as a string literal, you must replace
    each \ character with \\.

The second argument [optional]:

    If supplied, it indicates the regular-expression flags.
    It should be g, i, m, or a combination of those letters.

Example:

    // Find all five-digit numbers in a string. Note the double \\ in this case.
    var zipcode = new RegExp("\\d{5}", "g");
-
