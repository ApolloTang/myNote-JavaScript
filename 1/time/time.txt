Date.UTC()
==========

    Date.UTC(year, month[, day[, hour[, minute[, second[, millisecond]]]]]) => string

    This is a Static Method

    [Parameter]:
        year, month[, day[, hour[, minute[, second[, millisecond]]]]]

    [Return]:
        <string> number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time.

        [!] Does not return a Date object. If you want a Date Object use:
            var utcDate = new Date(Date.UTC(2014, 11, 1, 0, 0, 0));

Date.parse()
============

    Date.parse(dateString)

    This is a Static Method

    [Parameters]
        dateString: A string representing an RFC2822 or ISO 8601 date
                    (other formats may be used, but results may be unexpected).

    [Return]
        Returns the number of milliseconds since January 1, 1970
        00:00:00 UTC or NaN if the string is unrecognised or
        contains illegal date values (e.g. 2015-02-31).

    [!] Given a date string of                                                //@TODO
            "March 7, 2014",
        parse() assumes a local time zone,
        However, if you give it an ISO format such as
            "2014 03-07"
        it will assume a time zone of UTC for ES5 or local
        for ECMAScript 2015.


Date Constructor
================

    [Signature]

        new Date();
        new Date(value);
        new Date(dateString);
        new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);

        Details:
        --------

        new Date();

            Creates a JavaScript Date object for the current
            date and time according to system settings.

        new Date(value);

            Where the parameter of integer value representing
            the number of milliseconds since 1 January 1970 00 00:00 UTC (Unix Epoch).

        new Date(dateString);

            Where dateString is string value representing a date.
            The string should be in a format recognized by the
            Date.parse() method (IETF-compliant RFC 2822 timestamps
            and also a version of ISO8601).

        new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);

            Missing optional arguments are either set to
            1 (if day is missing) or 0 for all others.



How to read JS time
===================

    > d1 = new Date();          // instantiate at London
    < Sat Jan 02 2016 18:21:35 GMT+0000 (WET)
    > s1 = d1.toISOString();
    < "2016-01-02T18:21:35.589Z"

    > d2 = new Date(s1);        // instantiate at Toronto
    < Sat Jan 02 2016 13:21:35 GMT-0500 (EST)
    > s2 = d2.toISOString();
    < "2016-01-02T18:21:35.589Z"

    > s1 === s2 // true  // toISO always specified in UTC
    > d1 === d2 // false

    Sat Jan 02 2016 13:21:35 GMT-0500 (EST)
                    ^^          ^^^
                    t_l         tz (include the sign)

    t_l = d1.getHour() = d2.getHour()  // local hour; return 18 at London, return 13 at Toronto
    t = d1.UTCHour() = d2.UTCHour()    // UTC hour; always 18

    t_l - (tz) = t_utc
    13  - (-5) = 18

    t_offset = d1.getTimezoneOffset() === d2.getTimezoneOffset();  // return 0 at London, return 300min at Toronto
    t_offset = t_l - t_utc
    t_offset/60 = 5hour



to Method of data object
========================
    d = new Date()          Fri Jan 01 2016 16:23:21 GMT-0500 (EST)

    d.toString()            "Fri Jan 01 2016 16:23:21 GMT-0500 (EST)"
    d.toTimeString()                        "16:23:21 GMT-0500 (EST)"
    d.toDateString()        "Fri Jan 01 2016"

    d.toJSON()              "2016-01-01T21:23:21.473Z"
    d.toISOString()         "2016-01-01T21:23:21.473Z"

    d.toGMTString()         "Fri, 01 Jan 2016 21:23:21 GMT"
    d.toUTCString()         "Fri, 01 Jan 2016 21:23:21 GMT"

    d.toLocaleString()      "1/1/2016, 4:23:21 PM"
    d.toLocaleDateString()  "1/1/2016"
    d.toLocaleTimeString()            "4:23:21 PM"



